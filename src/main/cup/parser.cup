package lyc.compiler;

import java_cup.runtime.*;

class Parser;


// Terminals
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;

terminal GREATER;
terminal LESS;

terminal AND;
terminal OR;
terminal NOT;

terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal OPEN_CURLY_BRACKET;
terminal CLOSE_CURLY_BRACKET;
terminal OPEN_SQUARE_BRACKET;
terminal CLOSE_SQUARE_BRACKET;
terminal COLON;
terminal COMMA;
terminal QUOTE;

terminal INIT;
terminal READ;
terminal WRITE;

terminal WHILE;
terminal IF;
terminal ELSE;

terminal IGUALES;
terminal DO;
terminal CASE;
terminal DEFAULT;
terminal ENDDO;

terminal INT;
terminal FLOAT;
terminal STRING;

terminal INTEGER_CONSTANT;
terminal FLOAT_CONSTANT;
terminal STRING_CONSTANT;
terminal IDENTIFIER;

// Non Terminals
non terminal programa;
non terminal sentence;
non terminal declaration;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;

// Start Symbol Definition
start with programa;

programa ::=
    sentence {: System.out.println("Programa es: sentencias\nCOMPILACION EXITOSA\n"); :};
sentence ::=
    sentence statement_block
    | statement_block
    | sentence assignment
    | assignment
    | sentence in
    | in
    | sentence out
    | out
    | sentence if
    | if
    | sentence while
    | while ;
statement_block ::=
    INIT OPEN_BRACKET statement_list CLOSE_BRACKET {: System.out.println("Programa es: sentencias\nCOMPILACION EXITOSA\n"); :};


sentence ::= assignment {: System.out.println("End"); :};
assignment ::= IDENTIFIER ASSIG expression {: System.out.println("Assignment"); :};
expression ::= expression PLUS term {: System.out.println("+"); :};
expression ::= expression SUB term {: System.out.println("-"); :};
expression ::= term {: System.out.println("Expression = Term"); :};
term ::= term MULT factor {: System.out.println("*"); :};
term ::= term DIV factor {: System.out.println("/"); :};
term ::= factor {: System.out.println("Term = factor"); :};
factor ::= IDENTIFIER:id  {: System.out.println("Id: " + id); :};
factor ::= INTEGER_CONSTANT:constant {: System.out.println("Constant: " + constant ); :};
factor ::= OPEN_BRACKET expression CLOSE_BRACKET {: System.out.println("Factor = (Expression)"); :};



// creo que necesitamos una sentencia de: INIT, READ, WRITE, WHILE, IF, ELSE, IGUALES, DO, CASE, DEFAULT, ENDDO
                                                 //     //    //    //

sentence ::= read {: System.out.println("read"); :};
read ::= READ IDENTIFIER {: System.out.println("identifier"); :};

sentence ::= write {: System.out.println("write"); :};
write ::= WRITE IDENTIFIER {: System.out.println("identifier"); :};

sentence ::= if {: System.out.println("if"); :};
if ::= IF OPEN_BRACKET conditions CLOSE_BRACKET start_iF end_if {: System.out.println("if"); :};
conditions ::= condition logic_operator condition {: System.out.println("conditions"); :};
condition ::= IDENTIFIER comparation num {: System.out.println("comparation"); :};
comparation ::= LESS {: System.out.println("<"); :};
comparation ::= GREATER {: System.out.println(">"); :};
num ::= INTEGER_CONSTANT:constant {: System.out.println("Constant: " + constant ); :};
num ::= FLOAT_CONSTANT:constant {: System.out.println("Float constant: " + constant ); :};
logic_operator ::= AND {: System.out.println("&"); :};
logic_operator ::= OR {: System.out.println("||"); :};
logic_operator ::= NOT {: System.out.println("not"); :};
start_iF ::= ;
end_if ::= ;

sentence ::= while {: System.out.println("while"); :};
while ::= WHILE OPEN_BRACKET list_num CLOSE_BRACKET DO sentence ENDDO {: System.out.println("while"); :}; // creo que seria ENDWHILE no ENDDO
list_num ::= list_num COMMA num {: System.out.println("list_num"); :}; // solo sirve para numeros, hay que ver como hacer que sirva para letras tambien

