package lyc.compiler;

import java_cup.runtime.*;

class Parser;


// Terminals
//terminal RESERVED;

terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;

terminal GREATER;
terminal LESS;
terminal EQUAL;

terminal AND;
terminal OR;
terminal NOT;

terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal OPEN_CURLY_BRACKET;
terminal CLOSE_CURLY_BRACKET;
terminal OPEN_SQUARE_BRACKET;
terminal CLOSE_SQUARE_BRACKET;
terminal COLON;
terminal COMMA;
terminal QUOTE;

terminal INIT;
terminal READ;
terminal WRITE;

terminal WHILE;
terminal IF;
terminal ELSE;

terminal IGUALES;
terminal DO;
terminal CASE;
terminal DEFAULT;
terminal ENDDO;

terminal INT;
terminal FLOAT;
terminal STRING;

terminal INTEGER_CONSTANT;
terminal FLOAT_CONSTANT;
terminal STRING_CONSTANT;
terminal IDENTIFIER;

terminal OPEN_COMMENT;
terminal CLOSE_COMMENT;
terminal COMMENT;

// Non Terminals
non terminal program;
non terminal sentence;
non terminal grammar;
non terminal declaration;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;
non terminal statement_block;
non terminal statement_list;
non terminal data_type;
non terminal in;
non terminal out;
non terminal if;
non terminal while;
non terminal condition;
non terminal logic_operator;
non terminal comparation;
non terminal case;
non terminal iguales;
non terminal statement_case;
non terminal lista_expression;

// Start Symbol Definition
start with program;
program ::= {: System.out.println("Vacio"); :};
program ::= sentence       {: System.out.println("Program"); :};
sentence ::= sentence grammar{: System.out.println("grammar"); :};
sentence ::= grammar{: System.out.println("grammar"); :};

grammar ::= statement_block {: System.out.println("statement_block"); :};
grammar ::= assignment {: System.out.println("Assignment"); :};
grammar ::= in {: System.out.println("Read"); :};
grammar ::= out {: System.out.println("Write"); :};
grammar ::= if {: System.out.println("If"); :};
grammar ::= while {: System.out.println("While"); :};
grammar ::= case {: System.out.println("Case"); :};
grammar ::= iguales {: System.out.println("Iguales"); :};
//sentence ::= sentence comments;
//sentence ::= comments {: System.out.println("Comment"); :};

statement_block ::= INIT OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET;
statement_list ::= statement_list declaration;
statement_list ::= declaration;
declaration ::= IDENTIFIER COMMA declaration;
declaration ::= IDENTIFIER COLON data_type;
data_type ::= FLOAT;
data_type ::= INT;
data_type ::= STRING;

assignment ::= IDENTIFIER ASSIG expression {: System.out.println("Assignment"); :};
expression ::= expression PLUS term {: System.out.println("+"); :};
expression ::= expression SUB term {: System.out.println("-"); :};
expression ::= term {: System.out.println("Expression = Term"); :};
term ::= term MULT factor {: System.out.println("*"); :};
term ::= term DIV factor {: System.out.println("/"); :};
term ::= factor {: System.out.println("Term = factor"); :};
factor ::= IDENTIFIER:id  {: System.out.println("Id: " + id); :};
factor ::= INTEGER_CONSTANT:constant {: System.out.println("Constant: " + constant ); :};
factor ::= FLOAT_CONSTANT:constant {: System.out.println("Constant: " + constant ); :};
factor ::= STRING_CONSTANT:constant {: System.out.println("Constant: " + constant ); :};
factor ::= OPEN_BRACKET expression CLOSE_BRACKET {: System.out.println("Factor = (Expression)"); :};

in ::= READ OPEN_BRACKET IDENTIFIER CLOSE_BRACKET; //pueden ser solo variables las que lee?

out ::= WRITE OPEN_BRACKET IDENTIFIER CLOSE_BRACKET;
out ::= WRITE OPEN_BRACKET STRING_CONSTANT CLOSE_BRACKET;

if ::= IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET sentence CLOSE_CURLY_BRACKET {: System.out.println("if"); :};
if ::= IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET sentence CLOSE_CURLY_BRACKET ELSE OPEN_CURLY_BRACKET sentence CLOSE_CURLY_BRACKET {: System.out.println("if and else"); :};
condition ::= expression comparation expression;
condition ::= NOT expression comparation expression {: System.out.println("not"); :};
condition ::= expression comparation expression logic_operator expression comparation expression;
logic_operator ::= AND {: System.out.println("&"); :};
logic_operator ::= OR {: System.out.println("||"); :};
comparation ::= LESS {: System.out.println("<"); :};
comparation ::= GREATER {: System.out.println(">"); :};
comparation ::= EQUAL {: System.out.println("=="); :};

while ::= WHILE OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET sentence CLOSE_CURLY_BRACKET {: System.out.println("While"); :};

case ::= DO IDENTIFIER statement_case DEFAULT OPEN_CURLY_BRACKET sentence CLOSE_CURLY_BRACKET ENDDO;
case ::= DO IDENTIFIER statement_case DEFAULT ENDDO; //No sabemos si dejar el default en este caso
statement_case ::= statement_case CASE condition OPEN_CURLY_BRACKET sentence CLOSE_CURLY_BRACKET;
statement_case ::= CASE condition OPEN_CURLY_BRACKET sentence CLOSE_CURLY_BRACKET;

//comments ::= OPEN_COMMENT comment CLOSE_COMMENT;

//comment ::= comment STRING_CONSTANT;
//comment ::= STRING_CONSTANT;

    //#Iguales ( a+w/b, [(d-3)*2,e,f] ) = 2 si (a+w/b = (d-3)*2 ) & (a+w/b =f) & (a+w/b â‰  e)
iguales ::= IGUALES OPEN_BRACKET expression COMMA OPEN_SQUARE_BRACKET lista_expression CLOSE_SQUARE_BRACKET CLOSE_BRACKET;
    //FALTA TERMINAR LOKO
lista_expression ::= lista_expression COMMA expression;
lista_expression ::= expression;
