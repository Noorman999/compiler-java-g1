package lyc.compiler;

import java_cup.runtime.*;
import lyc.compiler.files.SymbolTableGenerator;
import lyc.compiler.files.IntermediateCodeGenerator;
import lyc.compiler.files.IntermediateCodeNodo;
import lyc.compiler.files.AsmCodeGenerator;
import lyc.compiler.files.Puntero;

class Parser;

action code {:
SymbolTableGenerator gts = SymbolTableGenerator.getInstance();
IntermediateCodeGenerator gci = IntermediateCodeGenerator.getInstance();
AsmCodeGenerator gca = AsmCodeGenerator.getInstance();
:};

// Terminals

terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;

terminal GREATER;
terminal LESS;
terminal EQUAL;

terminal AND;
terminal OR;
terminal NOT;

terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal OPEN_CURLY_BRACKET;
terminal CLOSE_CURLY_BRACKET;
terminal OPEN_SQUARE_BRACKET;
terminal CLOSE_SQUARE_BRACKET;
terminal COLON;
terminal COMMA;

terminal INIT;
terminal READ;
terminal WRITE;

terminal WHILE;
terminal IF;
terminal ELSE;

terminal IGUALES;
terminal DO;
terminal CASE;
terminal DEFAULT;
terminal ENDDO;

terminal INT;
terminal FLOAT;
terminal STRING;

terminal INTEGER_CONSTANT;
terminal FLOAT_CONSTANT;
terminal STRING_CONSTANT;
terminal IDENTIFIER;

// Non Terminals
non terminal program;
non terminal sentence;
non terminal grammar;
non terminal declaration;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;
non terminal statement_block;
non terminal statement_list;
non terminal data_type;
non terminal in;
non terminal out;
non terminal if;
non terminal while;
non terminal condition;
non terminal condition2;
non terminal logic_operator;
non terminal comparation;
non terminal case;
non terminal block_case;
non terminal statement_case;
non terminal default;
non terminal iguales;
non terminal lista_expression;

// Start Symbol Definition
start with program;


program ::=                                                                    {: System.out.println("Programa vacio [R0]"); :};
program ::= sentence                                                           {: gci.asignarPuntero(Puntero.p_program,Puntero.p_sentence);System.out.println("program = sentence [R1]\nPrograma finalizado");gca.generarAssembler();:};
sentence::= sentence grammar                                                   {: gci.agregarNodo(Puntero.p_sentence," _",Puntero.p_sentence,Puntero.p_grammar); System.out.println("sentence = sentence grammar [R2]");:};
sentence::= grammar                                                            {: gci.asignarPuntero(Puntero.p_sentence,Puntero.p_grammar); System.out.println("sentence = grammar [R3]"); :};
grammar ::= statement_block                                                    {: System.out.println("grammar = statement_block [R4]"); :};
grammar ::= assignment                                                         {: gci.asignarPuntero(Puntero.p_grammar,Puntero.p_assignment); System.out.println("grammar = assignment [R5]");:};
grammar ::= in                                                                 {: gci.asignarPuntero(Puntero.p_grammar,Puntero.p_read); System.out.println("grammar = in [R6]");:};
grammar ::= out                                                                {: gci.asignarPuntero(Puntero.p_grammar,Puntero.p_write); System.out.println("grammar = out [R7]");:};
grammar ::= if                                                                 {: gci.asignarPuntero(Puntero.p_grammar,Puntero.p_if); System.out.println("grammar = if [R8]");:};
grammar ::= while                                                              {: gci.asignarPuntero(Puntero.p_grammar,Puntero.p_while); System.out.println("grammar = while [R9]");:};
grammar ::= case                                                               {: gci.asignarPuntero(Puntero.p_grammar,Puntero.p_case); System.out.println("grammar = case [R10]");:};
grammar ::= iguales                                                            {: gci.asignarPuntero(Puntero.p_grammar,Puntero.p_iguales); System.out.println("grammar = iguales [R11]");:};

statement_block ::= INIT OPEN_CURLY_BRACKET statement_list CLOSE_CURLY_BRACKET  {: System.out.println("statement block [R12]");:};
statement_list ::= statement_list declaration                                   {: System.out.println(); :};
statement_list ::= declaration                                                  {: System.out.println(); :};
declaration ::= IDENTIFIER:id COMMA declaration                                 {: System.out.print(" "+id);
                                                                                   gts.addTokenInit(id+""); :}; //revisar
declaration ::= IDENTIFIER:id COLON data_type                                   {: System.out.print(" "+id);
                                                                                   gts.addTokenInit(id+""); :}; //revisar
data_type ::= INT                                                               {: System.out.print("DATA TYPE: INT -->");
                                                                                   gts.addTokenInit("Int"); :}; //revisar
data_type ::= FLOAT                                                             {: System.out.print("DATA TYPE: FLOAT -->");
                                                                                   gts.addTokenInit("Float"); :}; //revisar
data_type ::= STRING                                                            {: System.out.print("DATA TYPE: STRING -->");
                                                                                   gts.addTokenInit("String"); :}; //revisar
assignment ::= IDENTIFIER:id ASSIG expression                                   {: System.out.println("assignment [R13]");
                                                                                   gts.addTokenIdAssignment(id+"");
                                                                                   gci.agregarHoja(Puntero.p_hojaNueva,id+"");
                                                                                   gci.agregarNodo(Puntero.p_assignment,"=",Puntero.p_hojaNueva,Puntero.p_expression); :};
expression ::= expression {:gci.apilarNodo(Puntero.p_expression);:} PLUS term      {: System.out.println("expression + term [R14]");
                                                                                    gci.desapilarNodo(Puntero.p_expression);
                                                                                   gci.agregarNodo(Puntero.p_expression,"+",Puntero.p_expression,Puntero.p_term); :};
expression ::= expression {:gci.apilarNodo(Puntero.p_expression);:} SUB term       {: System.out.println("expression - term [R15]");
                                                                                   gci.desapilarNodo(Puntero.p_expression);
                                                                                   gci.agregarNodo(Puntero.p_expression,"-",Puntero.p_expression,Puntero.p_term); :};
expression ::= term                                                               {: System.out.println("Expression = Term");
                                                                                   gci.asignarPuntero(Puntero.p_expression,Puntero.p_term); :};
term ::= term {:gci.apilarNodo(Puntero.p_term);:} MULT factor                     {: System.out.println("term * factor [R16]");
                                                                                   gci.desapilarNodo(Puntero.p_term);
                                                                                   gci.agregarNodo(Puntero.p_term,"*",Puntero.p_term,Puntero.p_factor); :};
term ::= term {:gci.apilarNodo(Puntero.p_term);:} DIV factor                       {: System.out.println("term / factor [R17]");
                                                                                   gci.desapilarNodo(Puntero.p_term);
                                                                                   gci.agregarNodo(Puntero.p_term,"/",Puntero.p_term,Puntero.p_factor); :};
term ::= factor                                                                 {: System.out.println("term = factor");
                                                                                   gci.asignarPuntero(Puntero.p_term,Puntero.p_factor);:};
factor ::= OPEN_BRACKET expression CLOSE_BRACKET                                {: System.out.println("factor = (expression) [R18]");
                                                                                   gci.asignarPuntero(Puntero.p_factor,Puntero.p_expression); :};
factor ::= IDENTIFIER:id                                                        {: System.out.println("ID: " + id);
                                                                                   gts.addTokenIdAssignment(id+"");
                                                                                   gci.agregarHoja(Puntero.p_factor,id+""); :};
factor ::= INTEGER_CONSTANT:constant                                            {: System.out.println("CONSTANT INT: " + constant );
                                                                                   gts.addTokenCteAssignment(constant+"", "Int");
                                                                                   gci.agregarHoja(Puntero.p_factor,constant+""); :};
factor ::= FLOAT_CONSTANT:constant                                              {: System.out.println("CONSTANT FLOAT: " + constant );
                                                                                   gts.addTokenCteAssignment(constant+"", "Float");
                                                                                   gci.agregarHoja(Puntero.p_factor,constant+""); :};
factor ::= STRING_CONSTANT:constant                                             {: System.out.println("CONSTANT STRING: " + constant );
                                                                                   gts.addTokenCteAssignment(constant+"", "String");
                                                                                   gci.agregarHoja(Puntero.p_factor,constant+""); :};

in ::= READ OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET                            {: System.out.println("read ID: "+id+"[R19]");
                                                                                   gts.addTokenIdAssignment(id+"");
                                                                                   gci.agregarHoja(Puntero.p_read1,"R");
                                                                                   gci.agregarHoja(Puntero.p_read2,id+"");
                                                                                   gci.agregarNodo(Puntero.p_read," read",Puntero.p_read1,Puntero.p_read2); :};

out ::= WRITE OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET                          {: System.out.println("write ID: "+id+"[R20]");
                                                                                   gts.addTokenIdAssignment(id+"");
                                                                                   gci.agregarHoja(Puntero.p_write1,"W");
                                                                                   gci.agregarHoja(Puntero.p_write2,id+"");
                                                                                   gci.agregarNodo(Puntero.p_write," write",Puntero.p_write1,Puntero.p_write2); :}; //revisar
out ::= WRITE OPEN_BRACKET STRING_CONSTANT:constant CLOSE_BRACKET               {: System.out.println("write ID: "+constant+"[R21]");
                                                                                   gts.addTokenCteAssignment(constant+"", "String");
                                                                                   gci.agregarHoja(Puntero.p_write1,"W");
                                                                                   gci.agregarHoja(Puntero.p_write2,constant+"");
                                                                                   gci.agregarNodo(Puntero.p_write," write",Puntero.p_write1,Puntero.p_write2);:}; //revisar


if ::= IF {: gci.asignarPuntero(Puntero.p_sentence,"null"); gci.apilarNodo(Puntero.p_sentence);:}
condition {: gci.apilarNodo2(Puntero.p_condition); :} OPEN_CURLY_BRACKET sentence CLOSE_CURLY_BRACKET  {: System.out.println("If block [R22]");
                                                                                                        gci.desapilarNodo2(Puntero.p_condition);
                                                                                                        gci.agregarNodo(Puntero.p_if," if",Puntero.p_condition,Puntero.p_sentence);:};

//REVISAR PUNTEROS
/*
if ::= IF {: gci.asignarPuntero(Puntero.p_sentence,"null"); gci.apilarNodo(Puntero.p_sentence);:} OPEN_BRACKET condition2 {: gci.apilarNodo2(Puntero.p_condition); :} CLOSE_BRACKET OPEN_CURLY_BRACKET sentence CLOSE_CURLY_BRACKET                                 {: System.out.println("If Block");
                                                                                                                                   gci.agregarNodo(Puntero.p_if," if",Puntero.p_condition,Puntero.p_sentence);:};
*/
/*
if ::= IF {: gci.asignarPuntero(Puntero.p_sentence,"null"); gci.apilarNodo(Puntero.p_sentence);:} condition {: gci.apilarNodo2(Puntero.p_condition); :}
OPEN_CURLY_BRACKET sentence CLOSE_CURLY_BRACKET  {: gci.apilarNodo(Puntero.p_sentence); System.out.println("If Block"); :}
 ELSE OPEN_CURLY_BRACKET sentence CLOSE_CURLY_BRACKET                                                {: System.out.println("If with Else Block");
                                                                                                       gci.desapilarNodo(Puntero.p_aux);
                                                                                                       gci.agregarNodo(Puntero.p_aux2,"CuerpoIf",Puntero.p_aux,Puntero.p_sentence);
                                                                                                       gci.asignarPuntero(Puntero.p_sentence,Puntero.p_aux2);
                                                                                                       gci.agregarNodo(Puntero.p_if," if",Puntero.p_condition,Puntero.p_sentence);:};
*/
//REVISAR PUNTEROS
/*
if ::= IF OPEN_BRACKET condition2 CLOSE_BRACKET  OPEN_CURLY_BRACKET sentence CLOSE_CURLY_BRACKET {:gci.asignarPuntero(Puntero.p_if1,Puntero.p_if);:}
 ELSE  OPEN_CURLY_BRACKET sentence CLOSE_CURLY_BRACKET                                                                               {: System.out.println("If with Else Block");
                                                                                                                                    gci.agregarNodo(Puntero.p_if," else",Puntero.p_if1,Puntero.p_sentence);:};
*/

while ::= WHILE {: gci.asignarPuntero(Puntero.p_sentence,"null"); gci.apilarNodo(Puntero.p_sentence);:}
condition {: gci.apilarNodo2(Puntero.p_condition); :} OPEN_CURLY_BRACKET sentence CLOSE_CURLY_BRACKET  {: System.out.println("While block [R26]");
                                                                                                          gci.desapilarNodo2(Puntero.p_condition);
                                                                                                          gci.agregarNodo(Puntero.p_while," while",Puntero.p_condition,Puntero.p_sentence);:};
//REVISAR PUNTEROS
/*
while ::= WHILE OPEN_BRACKET condition2 CLOSE_BRACKET OPEN_CURLY_BRACKET sentence CLOSE_CURLY_BRACKET                                                       {: System.out.println("While Block");

                                                                                                                                   gci.agregarNodo(Puntero.p_while," while",Puntero.p_condition,Puntero.p_sentence);:};
*/
condition ::= OPEN_BRACKET expression {:gci.apilarNodo(Puntero.p_expression);:} comparation expression CLOSE_BRACKET          {: System.out.println("Simple Condition [R28]");
                                                                                                                                 gci.desapilarNodo(Puntero.p_condition);
                                                                                                                                 gci.agregarNodo(Puntero.p_condition,gci.desapilar(),Puntero.p_condition,Puntero.p_expression);:};
condition ::= OPEN_BRACKET NOT expression {:gci.apilarNodo(Puntero.p_expression);:} comparation expression CLOSE_BRACKET       {: System.out.println("Not Condition [R29]");
                                                                                                                                  gci.desapilarNodo(Puntero.p_condition);
                                                                                                                                  gci.agregarNodo(Puntero.p_condition," !",Puntero.p_condition,Puntero.p_expression);:};
//REVISAR SI FALTA ALGO
/*
condition2 ::= condition logic_operator condition                                                                              {: System.out.println("DOUBLE Condition [R30]");:};

logic_operator ::= AND                                                          {: System.out.println("& (AND)");
                                                                                   gci.apilar("&"); :};
logic_operator ::= OR                                                           {: System.out.println("|| (OR)");
                                                                                   gci.apilar("||"); :};
*/
comparation ::= LESS                                                            {: System.out.println("< (LESS) [R31]");
                                                                                   gci.apilar("<"); :};
comparation ::= GREATER                                                         {: System.out.println("> (GREATER) [R32]");
                                                                                   gci.apilar(">"); :};
comparation ::= EQUAL                                                           {: System.out.println("== (EQUAL) [R33]");
                                                                                   gci.apilar("=="); :};

case ::= DO IDENTIFIER:id block_case ENDDO                                      {: System.out.println("case block [R34]");
                                                                                   gts.addTokenIdAssignment(id+"");
                                                                                   gci.agregarHoja(Puntero.p_hojaNueva,id+"");
                                                                                   gci.agregarNodo(Puntero.p_case," DO",Puntero.p_hojaNueva,Puntero.p_block_case); :};

block_case ::= statement_case                                                   {:gci.asignarPuntero(Puntero.p_block_case,Puntero.p_statement_case);:};
block_case ::= statement_case DEFAULT OPEN_CURLY_BRACKET sentence CLOSE_CURLY_BRACKET             {: System.out.println("Default Case [R35]");
                                                                                                    gci.agregarNodo(Puntero.p_block_case," DEFAULT",Puntero.p_statement_case,Puntero.p_sentence); :};
statement_case ::= CASE IDENTIFIER:id comparation expression                       {:gci.asignarPuntero(Puntero.p_exp7,Puntero.p_expression);:}
                   OPEN_CURLY_BRACKET sentence CLOSE_CURLY_BRACKET                 {: System.out.println("Statement Case [R36]");
                                                                                   gts.addTokenIdAssignment(id+"");
                                                                                   gci.agregarHoja(Puntero.p_hojaNueva,id+"");
                                                                                   gci.agregarNodo(Puntero.p_case1,gci.desapilar(),Puntero.p_hojaNueva,Puntero.p_exp7);
                                                                                   gci.agregarNodo(Puntero.p_statement_case," CASE",Puntero.p_case1,Puntero.p_sentence); :};
statement_case ::= statement_case                                                 {:gci.asignarPuntero(Puntero.p_stat1,Puntero.p_statement_case);:}
                   CASE IDENTIFIER:id comparation expression                      {:gci.asignarPuntero(Puntero.p_exp7,Puntero.p_expression);:}
                   OPEN_CURLY_BRACKET sentence CLOSE_CURLY_BRACKET                   {: System.out.println("Statement Case [R36]");
                                                                                     gts.addTokenIdAssignment(id+"");
                                                                                     gci.agregarHoja(Puntero.p_hojaNueva,id+"");
                                                                                     gci.agregarNodo(Puntero.p_case1,gci.desapilar(),Puntero.p_hojaNueva,Puntero.p_exp7);
                                                                                     gci.agregarNodo(Puntero.p_stat2," CASE",Puntero.p_case1,Puntero.p_sentence);
                                                                                     gci.agregarNodo(Puntero.p_statement_case," _case_",Puntero.p_stat1,Puntero.p_stat2); :};

iguales ::= IGUALES OPEN_BRACKET expression {:gci.asignarPuntero(Puntero.p_exp6,Puntero.p_expression);:}
COMMA OPEN_SQUARE_BRACKET lista_expression CLOSE_SQUARE_BRACKET CLOSE_BRACKET  {: System.out.println("Iguales Block[R37]");
                                                                                  gci.agregarNodo(Puntero.p_iguales," iguales",Puntero.p_exp6,Puntero.p_lista_expression);:};

lista_expression ::= lista_expression COMMA expression                          {:  gci.asignarPuntero(Puntero.p_list1,Puntero.p_lista_expression);
                                                                                    gci.agregarNodo(Puntero.p_lista_expression,"_",Puntero.p_list1,Puntero.p_expression); :};
lista_expression ::= expression                                                 {:  gci.asignarPuntero(Puntero.p_lista_expression,Puntero.p_expression); :};


